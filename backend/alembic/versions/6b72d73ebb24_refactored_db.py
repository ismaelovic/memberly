"""refactored db

Revision ID: 6b72d73ebb24
Revises: 0dbdb6842784
Create Date: 2025-09-22 14:29:47.527333

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "6b72d73ebb24"
down_revision: Union[str, None] = "0dbdb6842784"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "member_auth",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("hashed_password", sa.String(), nullable=True),
        sa.Column("last_login", sa.DateTime(), nullable=True),
        sa.Column("login_attempts", sa.Integer(), nullable=False),
        sa.Column("password_reset_token", sa.String(), nullable=True),
        sa.Column("password_reset_expiry", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
    )
    op.create_index(op.f("ix_member_auth_id"), "member_auth", ["id"], unique=False)
    op.create_table(
        "member_profile",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("tenant_id", sa.Integer(), nullable=False),
        sa.Column("first_name", sa.String(), nullable=False),
        sa.Column("last_name", sa.String(), nullable=False),
        sa.Column(
            "role",
            sa.Enum("SYSTEM_ADMIN", "TENANT_ADMIN", "STAFF", "MEMBER", name="role"),
            nullable=False,
        ),
        sa.Column(
            "state",
            sa.Enum("ACTIVE", "CANCELLED", "SUSPENDED", "PAUSED", name="memberstate"),
            nullable=False,
        ),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["tenant_id"], ["tenants.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_member_profile_id"), "member_profile", ["id"], unique=False
    )
    op.create_table(
        "subscription_plans",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("tenant_id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("price", sa.Float(), nullable=False),
        sa.Column("duration_months", sa.Integer(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(["tenant_id"], ["tenants.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_subscription_plans_id"), "subscription_plans", ["id"], unique=False
    )
    op.create_index(
        op.f("ix_subscription_plans_tenant_id"),
        "subscription_plans",
        ["tenant_id"],
        unique=False,
    )
    op.drop_index("ix_members_email", table_name="members")
    op.drop_index("ix_members_id", table_name="members")
    op.drop_index("ix_members_tenant_id", table_name="members")
    op.drop_index("ix_users_email", table_name="users")
    op.drop_index("ix_users_id", table_name="users")
    op.drop_index("ix_users_tenant_id", table_name="users")

    op.add_column(
        "communications", sa.Column("tenant_id", sa.Integer(), nullable=False)
    )
    op.create_index(
        op.f("ix_communications_tenant_id"),
        "communications",
        ["tenant_id"],
        unique=False,
    )
    op.drop_constraint(
        "communications_member_id_fkey", "communications", type_="foreignkey"
    )
    op.create_foreign_key(
        None, "communications", "member_profile", ["member_id"], ["id"]
    )
    op.create_foreign_key(
        None, "communications", "tenants", ["tenant_id"], ["id"], ondelete="CASCADE"
    )
    op.add_column("memberships", sa.Column("plan_id", sa.Integer(), nullable=False))
    op.add_column("memberships", sa.Column("adjusted_price", sa.Float(), nullable=True))
    op.alter_column(
        "memberships",
        "start_date",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
    )
    op.alter_column(
        "memberships", "end_date", existing_type=postgresql.TIMESTAMP(), nullable=False
    )
    op.alter_column(
        "memberships", "is_active", existing_type=sa.BOOLEAN(), nullable=False
    )
    op.alter_column(
        "memberships",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
    )
    op.alter_column(
        "memberships",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
    )
    op.create_index(
        op.f("ix_memberships_plan_id"), "memberships", ["plan_id"], unique=False
    )
    op.drop_constraint("memberships_member_id_fkey", "memberships", type_="foreignkey")
    op.create_foreign_key(
        None, "memberships", "subscription_plans", ["plan_id"], ["id"]
    )
    op.create_foreign_key(None, "memberships", "member_profile", ["member_id"], ["id"])
    op.drop_column("memberships", "price")
    op.drop_column("memberships", "plan_name")
    op.add_column("payments", sa.Column("membership_id", sa.Integer(), nullable=False))
    op.add_column("payments", sa.Column("tenant_id", sa.Integer(), nullable=False))
    op.alter_column(
        "payments", "payment_date", existing_type=postgresql.TIMESTAMP(), nullable=False
    )
    op.alter_column(
        "payments", "created_at", existing_type=postgresql.TIMESTAMP(), nullable=False
    )
    op.alter_column(
        "payments", "updated_at", existing_type=postgresql.TIMESTAMP(), nullable=False
    )
    op.drop_constraint("payments_transaction_id_key", "payments", type_="unique")
    op.create_index(
        op.f("ix_payments_membership_id"), "payments", ["membership_id"], unique=False
    )
    op.create_index(
        op.f("ix_payments_tenant_id"), "payments", ["tenant_id"], unique=False
    )
    op.drop_constraint("payments_member_id_fkey", "payments", type_="foreignkey")
    op.create_foreign_key(
        None, "payments", "memberships", ["membership_id"], ["id"], ondelete="CASCADE"
    )
    op.create_foreign_key(
        None, "payments", "tenants", ["tenant_id"], ["id"], ondelete="CASCADE"
    )
    op.create_foreign_key(
        None, "payments", "member_profile", ["member_id"], ["id"], ondelete="CASCADE"
    )
    op.drop_column("payments", "status")
    op.drop_column("payments", "transaction_id")
    op.drop_column("payments", "method")
    op.add_column("tenants", sa.Column("address", sa.String(), nullable=True))
    op.add_column("tenants", sa.Column("phone", sa.String(), nullable=True))
    op.add_column("tenants", sa.Column("logo", sa.String(), nullable=True))
    op.alter_column(
        "tenants", "created_at", existing_type=postgresql.TIMESTAMP(), nullable=False
    )
    op.alter_column(
        "tenants", "updated_at", existing_type=postgresql.TIMESTAMP(), nullable=False
    )
    op.drop_index("ix_tenants_name", table_name="tenants")
    op.drop_column("tenants", "description")
    op.drop_column("tenants", "is_active")
    op.drop_table("members")
    op.drop_table("users")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "tenants",
        sa.Column("is_active", sa.BOOLEAN(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "tenants",
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
    )
    op.create_index("ix_tenants_name", "tenants", ["name"], unique=False)
    op.alter_column(
        "tenants", "updated_at", existing_type=postgresql.TIMESTAMP(), nullable=True
    )
    op.alter_column(
        "tenants", "created_at", existing_type=postgresql.TIMESTAMP(), nullable=True
    )
    op.drop_column("tenants", "logo")
    op.drop_column("tenants", "phone")
    op.drop_column("tenants", "address")
    op.add_column(
        "payments",
        sa.Column("method", sa.VARCHAR(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "payments",
        sa.Column("transaction_id", sa.VARCHAR(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "payments",
        sa.Column("status", sa.VARCHAR(), autoincrement=False, nullable=False),
    )
    op.drop_constraint(None, "payments", type_="foreignkey")
    op.drop_constraint(None, "payments", type_="foreignkey")
    op.drop_constraint(None, "payments", type_="foreignkey")
    op.create_foreign_key(
        "payments_member_id_fkey", "payments", "members", ["member_id"], ["id"]
    )
    op.drop_index(op.f("ix_payments_tenant_id"), table_name="payments")
    op.drop_index(op.f("ix_payments_membership_id"), table_name="payments")
    op.create_unique_constraint(
        "payments_transaction_id_key", "payments", ["transaction_id"]
    )
    op.alter_column(
        "payments", "updated_at", existing_type=postgresql.TIMESTAMP(), nullable=True
    )
    op.alter_column(
        "payments", "created_at", existing_type=postgresql.TIMESTAMP(), nullable=True
    )
    op.alter_column(
        "payments", "payment_date", existing_type=postgresql.TIMESTAMP(), nullable=True
    )
    op.drop_column("payments", "tenant_id")
    op.drop_column("payments", "membership_id")
    op.add_column(
        "memberships",
        sa.Column("plan_name", sa.VARCHAR(), autoincrement=False, nullable=False),
    )
    op.add_column(
        "memberships",
        sa.Column(
            "price",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.drop_constraint(None, "memberships", type_="foreignkey")
    op.drop_constraint(None, "memberships", type_="foreignkey")
    op.create_foreign_key(
        "memberships_member_id_fkey", "memberships", "members", ["member_id"], ["id"]
    )
    op.drop_index(op.f("ix_memberships_plan_id"), table_name="memberships")
    op.alter_column(
        "memberships", "updated_at", existing_type=postgresql.TIMESTAMP(), nullable=True
    )
    op.alter_column(
        "memberships", "created_at", existing_type=postgresql.TIMESTAMP(), nullable=True
    )
    op.alter_column(
        "memberships", "is_active", existing_type=sa.BOOLEAN(), nullable=True
    )
    op.alter_column(
        "memberships", "end_date", existing_type=postgresql.TIMESTAMP(), nullable=True
    )
    op.alter_column(
        "memberships", "start_date", existing_type=postgresql.TIMESTAMP(), nullable=True
    )
    op.drop_column("memberships", "adjusted_price")
    op.drop_column("memberships", "plan_id")
    op.drop_constraint(None, "communications", type_="foreignkey")
    op.drop_constraint(None, "communications", type_="foreignkey")
    op.create_foreign_key(
        "communications_member_id_fkey",
        "communications",
        "members",
        ["member_id"],
        ["id"],
    )
    op.drop_index(op.f("ix_communications_tenant_id"), table_name="communications")
    op.drop_column("communications", "tenant_id")
    op.create_table(
        "users",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("tenant_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("email", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("hashed_password", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("full_name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("is_active", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column("is_admin", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["tenant_id"], ["tenants.id"], name="users_tenant_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="users_pkey"),
    )
    op.create_index("ix_users_tenant_id", "users", ["tenant_id"], unique=False)
    op.create_index("ix_users_id", "users", ["id"], unique=False)
    op.create_index("ix_users_email", "users", ["email"], unique=False)
    op.create_table(
        "members",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("tenant_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("email", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("full_name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("phone", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("is_active", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["tenant_id"], ["tenants.id"], name="members_tenant_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="members_pkey"),
    )
    op.create_index("ix_members_tenant_id", "members", ["tenant_id"], unique=False)
    op.create_index("ix_members_id", "members", ["id"], unique=False)
    op.create_index("ix_members_email", "members", ["email"], unique=False)
    op.drop_index(
        op.f("ix_subscription_plans_tenant_id"), table_name="subscription_plans"
    )
    op.drop_index(op.f("ix_subscription_plans_id"), table_name="subscription_plans")
    op.drop_table("subscription_plans")
    op.drop_index(op.f("ix_member_profile_id"), table_name="member_profile")
    op.drop_table("member_profile")
    op.drop_index(op.f("ix_member_auth_id"), table_name="member_auth")
    op.drop_table("member_auth")
    # ### end Alembic commands ###
